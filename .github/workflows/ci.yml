name: Continuous Integration

on:
  push:
    branches: [ main, develop, funcshape ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10']
        # Temporarily exclude Windows due to Unicode issues
        # Will re-enable after fixing encoding problems

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('testing/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy scipy matplotlib pytest pytest-cov

    - name: Test imports
      run: |
        python -c "import numpy; print('numpy OK')"
        python -c "import scipy; print('scipy OK')"
        python -c "import matplotlib; print('matplotlib OK')"
        python -c "import sys; sys.path.insert(0, '.'); import apdist; print('apdist imports OK')"

    - name: Test basic functionality
      run: |
        python -c "
        import sys; sys.path.insert(0, '.')
        import numpy as np
        import warnings
        from apdist import AmplitudePhaseDistance
        t = np.linspace(0, 1, 51)
        f1 = np.sin(2 * np.pi * t)
        f2 = np.sin(2 * np.pi * t + np.pi/4)
        with warnings.catch_warnings():
            warnings.simplefilter('ignore')
            da, dp = AmplitudePhaseDistance(t, f1, f2)
        print(f'Distance computation works: da={da:.4f}, dp={dp:.4f}')
        assert da >= 0 and dp >= 0
        print('All tests passed!')
        "

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        directory: testing/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
